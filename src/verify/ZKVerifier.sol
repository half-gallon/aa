// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {IVerifier} from "../interfaces/Verifier.sol";

/**
 * $$\    $$\ $$$$$$$$\ $$$$$$$\  $$$$$$\ $$$$$$$$\ $$$$$$\ $$$$$$$$\ $$$$$$$\
 * $$ |   $$ |$$  _____|$$  __$$\ \_$$  _|$$  _____|\_$$  _|$$  _____|$$  __$$\
 * $$ |   $$ |$$ |      $$ |  $$ |  $$ |  $$ |        $$ |  $$ |      $$ |  $$ |
 * \$$\  $$  |$$$$$\    $$$$$$$  |  $$ |  $$$$$\      $$ |  $$$$$\    $$$$$$$  |
 *  \$$\$$  / $$  __|   $$  __$$<   $$ |  $$  __|     $$ |  $$  __|   $$  __$$<
 *   \$$$  /  $$ |      $$ |  $$ |  $$ |  $$ |        $$ |  $$ |      $$ |  $$ |
 *    \$  /   $$$$$$$$\ $$ |  $$ |$$$$$$\ $$ |      $$$$$$\ $$$$$$$$\ $$ |  $$ |
 *     \_/    \________|\__|  \__|\______|\__|      \______|\________|\__|  \__|
 */

contract ZKVerifier is IVerifier {
    ZKVerifierInner private inner = new ZKVerifierInner();

    function verify(uint256[] calldata pubInputs, bytes calldata proof) public view returns (bool) {
        uint256[2] memory instances;
        for (uint256 i = 0; i < instances.length; i++) {
            instances[i] = pubInputs[i];
        }

        return inner.verify(instances, proof);
    }
}

contract ZKVerifierInner {
    /**
     * @notice EZKL P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all instances are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    function verify(uint256[2] calldata instances, bytes calldata proof) public view returns (bool) {
        bool success = true;
        bytes32[962] memory transcript;
        for (uint256 i = 0; i < instances.length; i++) {
            require(instances[i] < SIZE_LIMIT);
        }
        assembly {
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube :=
                        mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 :=
                        addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0xa0, mod(calldataload(0x4), f_q))
            mstore(0xc0, mod(calldataload(0x24), f_q))
            mstore(0x80, 6324099152976400447756265981794936173514383252990573034549132888139231402140)
            {
                let x := calldataload(0x84)
                mstore(0xe0, x)
                let y := calldataload(0xa4)
                mstore(0x100, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0xc4)
                mstore(0x120, x)
                let y := calldataload(0xe4)
                mstore(0x140, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x104)
                mstore(0x160, x)
                let y := calldataload(0x124)
                mstore(0x180, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x1a0, keccak256(0x80, 288))
            {
                let hash := mload(0x1a0)
                mstore(0x1c0, mod(hash, f_q))
                mstore(0x1e0, hash)
            }
            {
                let x := calldataload(0x144)
                mstore(0x200, x)
                let y := calldataload(0x164)
                mstore(0x220, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x184)
                mstore(0x240, x)
                let y := calldataload(0x1a4)
                mstore(0x260, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x1c4)
                mstore(0x280, x)
                let y := calldataload(0x1e4)
                mstore(0x2a0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x204)
                mstore(0x2c0, x)
                let y := calldataload(0x224)
                mstore(0x2e0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x244)
                mstore(0x300, x)
                let y := calldataload(0x264)
                mstore(0x320, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x284)
                mstore(0x340, x)
                let y := calldataload(0x2a4)
                mstore(0x360, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x380, keccak256(0x1e0, 416))
            {
                let hash := mload(0x380)
                mstore(0x3a0, mod(hash, f_q))
                mstore(0x3c0, hash)
            }
            mstore8(0x3e0, 1)
            mstore(0x3e0, keccak256(0x3c0, 33))
            {
                let hash := mload(0x3e0)
                mstore(0x400, mod(hash, f_q))
                mstore(0x420, hash)
            }
            {
                let x := calldataload(0x2c4)
                mstore(0x440, x)
                let y := calldataload(0x2e4)
                mstore(0x460, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x304)
                mstore(0x480, x)
                let y := calldataload(0x324)
                mstore(0x4a0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x344)
                mstore(0x4c0, x)
                let y := calldataload(0x364)
                mstore(0x4e0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x384)
                mstore(0x500, x)
                let y := calldataload(0x3a4)
                mstore(0x520, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x3c4)
                mstore(0x540, x)
                let y := calldataload(0x3e4)
                mstore(0x560, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x404)
                mstore(0x580, x)
                let y := calldataload(0x424)
                mstore(0x5a0, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x5c0, keccak256(0x420, 416))
            {
                let hash := mload(0x5c0)
                mstore(0x5e0, mod(hash, f_q))
                mstore(0x600, hash)
            }
            {
                let x := calldataload(0x444)
                mstore(0x620, x)
                let y := calldataload(0x464)
                mstore(0x640, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x484)
                mstore(0x660, x)
                let y := calldataload(0x4a4)
                mstore(0x680, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x4c4)
                mstore(0x6a0, x)
                let y := calldataload(0x4e4)
                mstore(0x6c0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0x504)
                mstore(0x6e0, x)
                let y := calldataload(0x524)
                mstore(0x700, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x720, keccak256(0x600, 288))
            {
                let hash := mload(0x720)
                mstore(0x740, mod(hash, f_q))
                mstore(0x760, hash)
            }
            mstore(0x780, mod(calldataload(0x544), f_q))
            mstore(0x7a0, mod(calldataload(0x564), f_q))
            mstore(0x7c0, mod(calldataload(0x584), f_q))
            mstore(0x7e0, mod(calldataload(0x5a4), f_q))
            mstore(0x800, mod(calldataload(0x5c4), f_q))
            mstore(0x820, mod(calldataload(0x5e4), f_q))
            mstore(0x840, mod(calldataload(0x604), f_q))
            mstore(0x860, mod(calldataload(0x624), f_q))
            mstore(0x880, mod(calldataload(0x644), f_q))
            mstore(0x8a0, mod(calldataload(0x664), f_q))
            mstore(0x8c0, mod(calldataload(0x684), f_q))
            mstore(0x8e0, mod(calldataload(0x6a4), f_q))
            mstore(0x900, mod(calldataload(0x6c4), f_q))
            mstore(0x920, mod(calldataload(0x6e4), f_q))
            mstore(0x940, mod(calldataload(0x704), f_q))
            mstore(0x960, mod(calldataload(0x724), f_q))
            mstore(0x980, mod(calldataload(0x744), f_q))
            mstore(0x9a0, mod(calldataload(0x764), f_q))
            mstore(0x9c0, mod(calldataload(0x784), f_q))
            mstore(0x9e0, mod(calldataload(0x7a4), f_q))
            mstore(0xa00, mod(calldataload(0x7c4), f_q))
            mstore(0xa20, mod(calldataload(0x7e4), f_q))
            mstore(0xa40, mod(calldataload(0x804), f_q))
            mstore(0xa60, mod(calldataload(0x824), f_q))
            mstore(0xa80, mod(calldataload(0x844), f_q))
            mstore(0xaa0, mod(calldataload(0x864), f_q))
            mstore(0xac0, mod(calldataload(0x884), f_q))
            mstore(0xae0, mod(calldataload(0x8a4), f_q))
            mstore(0xb00, mod(calldataload(0x8c4), f_q))
            mstore(0xb20, mod(calldataload(0x8e4), f_q))
            mstore(0xb40, mod(calldataload(0x904), f_q))
            mstore(0xb60, mod(calldataload(0x924), f_q))
            mstore(0xb80, mod(calldataload(0x944), f_q))
            mstore(0xba0, mod(calldataload(0x964), f_q))
            mstore(0xbc0, mod(calldataload(0x984), f_q))
            mstore(0xbe0, mod(calldataload(0x9a4), f_q))
            mstore(0xc00, mod(calldataload(0x9c4), f_q))
            mstore(0xc20, mod(calldataload(0x9e4), f_q))
            mstore(0xc40, mod(calldataload(0xa04), f_q))
            mstore(0xc60, mod(calldataload(0xa24), f_q))
            mstore(0xc80, mod(calldataload(0xa44), f_q))
            mstore(0xca0, mod(calldataload(0xa64), f_q))
            mstore(0xcc0, keccak256(0x760, 1376))
            {
                let hash := mload(0xcc0)
                mstore(0xce0, mod(hash, f_q))
                mstore(0xd00, hash)
            }
            {
                let x := calldataload(0xa84)
                mstore(0xd20, x)
                let y := calldataload(0xaa4)
                mstore(0xd40, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0xac4)
                mstore(0xd60, x)
                let y := calldataload(0xae4)
                mstore(0xd80, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0xb04)
                mstore(0xda0, x)
                let y := calldataload(0xb24)
                mstore(0xdc0, y)
                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := calldataload(0xb44)
                mstore(0xde0, x)
                let y := calldataload(0xb64)
                mstore(0xe00, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0xe20, keccak256(0xd00, 288))
            {
                let hash := mload(0xe20)
                mstore(0xe40, mod(hash, f_q))
                mstore(0xe60, hash)
            }
            mstore(0xe80, mulmod(mload(0x740), mload(0x740), f_q))
            mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))
            mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))
            mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))
            mstore(0xf00, mulmod(mload(0xee0), mload(0xee0), f_q))
            mstore(0xf20, mulmod(mload(0xf00), mload(0xf00), f_q))
            mstore(0xf40, mulmod(mload(0xf20), mload(0xf20), f_q))
            mstore(0xf60, mulmod(mload(0xf40), mload(0xf40), f_q))
            mstore(0xf80, mulmod(mload(0xf60), mload(0xf60), f_q))
            mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))
            mstore(0xfc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))
            mstore(0xfe0, mulmod(mload(0xfc0), mload(0xfc0), f_q))
            mstore(0x1000, mulmod(mload(0xfe0), mload(0xfe0), f_q))
            mstore(0x1020, mulmod(mload(0x1000), mload(0x1000), f_q))
            mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))
            mstore(
                0x1060,
                addmod(
                    mload(0x1040), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q
                )
            )
            mstore(
                0x1080,
                mulmod(
                    mload(0x1060), 21887574895677414892802367463831943750807625009412603678587617693528122466305, f_q
                )
            )
            mstore(
                0x10a0,
                mulmod(
                    mload(0x1080), 16352530144570232727633744131804667993120004373047725463318648550785966993151, f_q
                )
            )
            mstore(
                0x10c0,
                addmod(mload(0x740), 5535712727269042494612661613452607095428360027368308880379555635789841502466, f_q)
            )
            mstore(
                0x10e0,
                mulmod(
                    mload(0x1080), 14553179485550867228528728261227346284647560894473765120196362074270314914987, f_q
                )
            )
            mstore(
                0x1100,
                addmod(mload(0x740), 7335063386288407993717677484029928803900803505942269223501842112305493580630, f_q)
            )
            mstore(
                0x1120,
                mulmod(mload(0x1080), 4521750382223097318870644937630448302689540805369738458837210702774549763045, f_q)
            )
            mstore(
                0x1140,
                addmod(mload(0x740), 17366492489616177903375760807626826785858823595046295884860993483801258732572, f_q)
            )
            mstore(
                0x1160,
                mulmod(
                    mload(0x1080), 10763352634187770026454006562738618997775638622944072507352459644433398105234, f_q
                )
            )
            mstore(
                0x1180,
                addmod(mload(0x740), 11124890237651505195792399182518656090772725777471961836345744542142410390383, f_q)
            )
            mstore(
                0x11a0,
                mulmod(
                    mload(0x1080), 21534532313823515215512181691915269261875716777293450290797415136928563006845, f_q
                )
            )
            mstore(
                0x11c0,
                addmod(mload(0x740), 353710558015760006734224053342005826672647623122584052900789049647245488772, f_q)
            )
            mstore(
                0x11e0,
                mulmod(
                    mload(0x1080), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q
                )
            )
            mstore(
                0x1200,
                addmod(mload(0x740), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q)
            )
            mstore(0x1220, mulmod(mload(0x1080), 1, f_q))
            mstore(
                0x1240,
                addmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)
            )
            mstore(
                0x1260,
                mulmod(
                    mload(0x1080), 19671853614403325433334785013442879012032153960035114761748042217991436932142, f_q
                )
            )
            mstore(
                0x1280,
                addmod(mload(0x740), 2216389257435949788911620731814396076516210440380919581950161968584371563475, f_q)
            )
            {
                let prod := mload(0x10c0)
                prod := mulmod(mload(0x1100), prod, f_q)
                mstore(0x12a0, prod)
                prod := mulmod(mload(0x1140), prod, f_q)
                mstore(0x12c0, prod)
                prod := mulmod(mload(0x1180), prod, f_q)
                mstore(0x12e0, prod)
                prod := mulmod(mload(0x11c0), prod, f_q)
                mstore(0x1300, prod)
                prod := mulmod(mload(0x1200), prod, f_q)
                mstore(0x1320, prod)
                prod := mulmod(mload(0x1240), prod, f_q)
                mstore(0x1340, prod)
                prod := mulmod(mload(0x1280), prod, f_q)
                mstore(0x1360, prod)
                prod := mulmod(mload(0x1060), prod, f_q)
                mstore(0x1380, prod)
            }
            mstore(0x13c0, 32)
            mstore(0x13e0, 32)
            mstore(0x1400, 32)
            mstore(0x1420, mload(0x1380))
            mstore(0x1440, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
            mstore(0x1460, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
            success := and(eq(staticcall(gas(), 0x5, 0x13c0, 0xc0, 0x13a0, 0x20), 1), success)
            {
                let inv := mload(0x13a0)
                let v
                v := mload(0x1060)
                mstore(0x1060, mulmod(mload(0x1360), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1280)
                mstore(0x1280, mulmod(mload(0x1340), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1240)
                mstore(0x1240, mulmod(mload(0x1320), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1200)
                mstore(0x1200, mulmod(mload(0x1300), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x11c0)
                mstore(0x11c0, mulmod(mload(0x12e0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1180)
                mstore(0x1180, mulmod(mload(0x12c0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1140)
                mstore(0x1140, mulmod(mload(0x12a0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                v := mload(0x1100)
                mstore(0x1100, mulmod(mload(0x10c0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                mstore(0x10c0, inv)
            }
            mstore(0x1480, mulmod(mload(0x10a0), mload(0x10c0), f_q))
            mstore(0x14a0, mulmod(mload(0x10e0), mload(0x1100), f_q))
            mstore(0x14c0, mulmod(mload(0x1120), mload(0x1140), f_q))
            mstore(0x14e0, mulmod(mload(0x1160), mload(0x1180), f_q))
            mstore(0x1500, mulmod(mload(0x11a0), mload(0x11c0), f_q))
            mstore(0x1520, mulmod(mload(0x11e0), mload(0x1200), f_q))
            mstore(0x1540, mulmod(mload(0x1220), mload(0x1240), f_q))
            mstore(0x1560, mulmod(mload(0x1260), mload(0x1280), f_q))
            {
                let result := mulmod(mload(0x1540), mload(0xa0), f_q)
                result := addmod(mulmod(mload(0x1560), mload(0xc0), f_q), result, f_q)
                mstore(0x1580, result)
            }
            mstore(0x15a0, addmod(1, sub(f_q, mload(0x900)), f_q))
            mstore(0x15c0, mulmod(mload(0x15a0), mload(0x900), f_q))
            mstore(0x15e0, addmod(2, sub(f_q, mload(0x900)), f_q))
            mstore(0x1600, mulmod(mload(0x15e0), mload(0x15c0), f_q))
            mstore(0x1620, mulmod(mload(0x7a0), mload(0x780), f_q))
            mstore(0x1640, addmod(mload(0x1620), mload(0x7e0), f_q))
            mstore(0x1660, addmod(mload(0x7c0), sub(f_q, mload(0x1640)), f_q))
            mstore(0x1680, mulmod(mload(0x1660), mload(0x1600), f_q))
            mstore(0x16a0, mulmod(mload(0x5e0), mload(0x1680), f_q))
            mstore(0x16c0, addmod(1, sub(f_q, mload(0x940)), f_q))
            mstore(0x16e0, mulmod(mload(0x16c0), mload(0x940), f_q))
            mstore(0x1700, addmod(2, sub(f_q, mload(0x940)), f_q))
            mstore(0x1720, mulmod(mload(0x1700), mload(0x16e0), f_q))
            mstore(0x1740, addmod(mload(0x7c0), sub(f_q, mload(0x7a0)), f_q))
            mstore(0x1760, mulmod(mload(0x1740), mload(0x1720), f_q))
            mstore(0x1780, addmod(mload(0x16a0), mload(0x1760), f_q))
            mstore(0x17a0, mulmod(mload(0x5e0), mload(0x1780), f_q))
            mstore(0x17c0, mulmod(mload(0x15e0), mload(0x900), f_q))
            mstore(0x17e0, addmod(3, sub(f_q, mload(0x900)), f_q))
            mstore(0x1800, mulmod(mload(0x17e0), mload(0x17c0), f_q))
            mstore(0x1820, addmod(mload(0x780), mload(0x7a0), f_q))
            mstore(0x1840, addmod(mload(0x7c0), sub(f_q, mload(0x1820)), f_q))
            mstore(0x1860, mulmod(mload(0x1840), mload(0x1800), f_q))
            mstore(0x1880, addmod(mload(0x17a0), mload(0x1860), f_q))
            mstore(0x18a0, mulmod(mload(0x5e0), mload(0x1880), f_q))
            mstore(0x18c0, addmod(1, sub(f_q, mload(0x920)), f_q))
            mstore(0x18e0, mulmod(mload(0x18c0), mload(0x920), f_q))
            mstore(0x1900, addmod(2, sub(f_q, mload(0x920)), f_q))
            mstore(0x1920, mulmod(mload(0x1900), mload(0x18e0), f_q))
            mstore(0x1940, addmod(mload(0x7c0), sub(f_q, mload(0x1620)), f_q))
            mstore(0x1960, mulmod(mload(0x1940), mload(0x1920), f_q))
            mstore(0x1980, addmod(mload(0x18a0), mload(0x1960), f_q))
            mstore(0x19a0, mulmod(mload(0x5e0), mload(0x1980), f_q))
            mstore(0x19c0, mulmod(mload(0x17e0), mload(0x15c0), f_q))
            mstore(0x19e0, addmod(mload(0x780), sub(f_q, mload(0x7a0)), f_q))
            mstore(0x1a00, addmod(mload(0x7c0), sub(f_q, mload(0x19e0)), f_q))
            mstore(0x1a20, mulmod(mload(0x1a00), mload(0x19c0), f_q))
            mstore(0x1a40, addmod(mload(0x19a0), mload(0x1a20), f_q))
            mstore(0x1a60, mulmod(mload(0x5e0), mload(0x1a40), f_q))
            mstore(0x1a80, mulmod(mload(0x1900), mload(0x920), f_q))
            mstore(0x1aa0, addmod(3, sub(f_q, mload(0x920)), f_q))
            mstore(0x1ac0, mulmod(mload(0x1aa0), mload(0x1a80), f_q))
            mstore(0x1ae0, addmod(mload(0x7a0), mload(0x7e0), f_q))
            mstore(0x1b00, addmod(mload(0x7c0), sub(f_q, mload(0x1ae0)), f_q))
            mstore(0x1b20, mulmod(mload(0x1b00), mload(0x1ac0), f_q))
            mstore(0x1b40, addmod(mload(0x1a60), mload(0x1b20), f_q))
            mstore(0x1b60, mulmod(mload(0x5e0), mload(0x1b40), f_q))
            mstore(0x1b80, mulmod(mload(0x1aa0), mload(0x18e0), f_q))
            mstore(0x1ba0, addmod(mload(0x7c0), sub(f_q, sub(f_q, mload(0x7a0))), f_q))
            mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x1b80), f_q))
            mstore(0x1be0, addmod(mload(0x1b60), mload(0x1bc0), f_q))
            mstore(0x1c00, mulmod(mload(0x5e0), mload(0x1be0), f_q))
            mstore(0x1c20, mulmod(mload(0x1700), mload(0x940), f_q))
            mstore(0x1c40, addmod(3, sub(f_q, mload(0x940)), f_q))
            mstore(0x1c60, mulmod(mload(0x1c40), mload(0x1c20), f_q))
            mstore(0x1c80, addmod(mload(0x7a0), sub(f_q, mload(0x7c0)), f_q))
            mstore(0x1ca0, mulmod(mload(0x1c80), mload(0x1c60), f_q))
            mstore(0x1cc0, addmod(mload(0x1c00), mload(0x1ca0), f_q))
            mstore(0x1ce0, mulmod(mload(0x5e0), mload(0x1cc0), f_q))
            mstore(0x1d00, mulmod(mload(0x1c40), mload(0x16e0), f_q))
            mstore(0x1d20, mulmod(mload(0x7a0), mload(0x1d00), f_q))
            mstore(0x1d40, addmod(mload(0x1ce0), mload(0x1d20), f_q))
            mstore(0x1d60, mulmod(mload(0x5e0), mload(0x1d40), f_q))
            mstore(
                0x1d80,
                addmod(mload(0x7a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)
            )
            mstore(0x1da0, mulmod(mload(0x1d80), mload(0x7a0), f_q))
            mstore(0x1dc0, mulmod(mload(0x1da0), mload(0x960), f_q))
            mstore(0x1de0, addmod(mload(0x1d60), mload(0x1dc0), f_q))
            mstore(0x1e00, mulmod(mload(0x5e0), mload(0x1de0), f_q))
            mstore(0x1e20, addmod(1, sub(f_q, mload(0xa40)), f_q))
            mstore(0x1e40, mulmod(mload(0x1e20), mload(0x1540), f_q))
            mstore(0x1e60, addmod(mload(0x1e00), mload(0x1e40), f_q))
            mstore(0x1e80, mulmod(mload(0x5e0), mload(0x1e60), f_q))
            mstore(0x1ea0, mulmod(mload(0xaa0), mload(0xaa0), f_q))
            mstore(0x1ec0, addmod(mload(0x1ea0), sub(f_q, mload(0xaa0)), f_q))
            mstore(0x1ee0, mulmod(mload(0x1ec0), mload(0x1480), f_q))
            mstore(0x1f00, addmod(mload(0x1e80), mload(0x1ee0), f_q))
            mstore(0x1f20, mulmod(mload(0x5e0), mload(0x1f00), f_q))
            mstore(0x1f40, addmod(mload(0xaa0), sub(f_q, mload(0xa80)), f_q))
            mstore(0x1f60, mulmod(mload(0x1f40), mload(0x1540), f_q))
            mstore(0x1f80, addmod(mload(0x1f20), mload(0x1f60), f_q))
            mstore(0x1fa0, mulmod(mload(0x5e0), mload(0x1f80), f_q))
            mstore(0x1fc0, addmod(1, sub(f_q, mload(0x1480)), f_q))
            mstore(0x1fe0, addmod(mload(0x14a0), mload(0x14c0), f_q))
            mstore(0x2000, addmod(mload(0x1fe0), mload(0x14e0), f_q))
            mstore(0x2020, addmod(mload(0x2000), mload(0x1500), f_q))
            mstore(0x2040, addmod(mload(0x2020), mload(0x1520), f_q))
            mstore(0x2060, addmod(mload(0x1fc0), sub(f_q, mload(0x2040)), f_q))
            mstore(0x2080, mulmod(mload(0x9a0), mload(0x3a0), f_q))
            mstore(0x20a0, addmod(mload(0x780), mload(0x2080), f_q))
            mstore(0x20c0, addmod(mload(0x20a0), mload(0x400), f_q))
            mstore(0x20e0, mulmod(mload(0x9c0), mload(0x3a0), f_q))
            mstore(0x2100, addmod(mload(0x7a0), mload(0x20e0), f_q))
            mstore(0x2120, addmod(mload(0x2100), mload(0x400), f_q))
            mstore(0x2140, mulmod(mload(0x2120), mload(0x20c0), f_q))
            mstore(0x2160, mulmod(mload(0x9e0), mload(0x3a0), f_q))
            mstore(0x2180, addmod(mload(0x7c0), mload(0x2160), f_q))
            mstore(0x21a0, addmod(mload(0x2180), mload(0x400), f_q))
            mstore(0x21c0, mulmod(mload(0x21a0), mload(0x2140), f_q))
            mstore(0x21e0, mulmod(mload(0x21c0), mload(0xa60), f_q))
            mstore(0x2200, mulmod(1, mload(0x3a0), f_q))
            mstore(0x2220, mulmod(mload(0x740), mload(0x2200), f_q))
            mstore(0x2240, addmod(mload(0x780), mload(0x2220), f_q))
            mstore(0x2260, addmod(mload(0x2240), mload(0x400), f_q))
            mstore(
                0x2280,
                mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x3a0), f_q)
            )
            mstore(0x22a0, mulmod(mload(0x740), mload(0x2280), f_q))
            mstore(0x22c0, addmod(mload(0x7a0), mload(0x22a0), f_q))
            mstore(0x22e0, addmod(mload(0x22c0), mload(0x400), f_q))
            mstore(0x2300, mulmod(mload(0x22e0), mload(0x2260), f_q))
            mstore(
                0x2320,
                mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x3a0), f_q)
            )
            mstore(0x2340, mulmod(mload(0x740), mload(0x2320), f_q))
            mstore(0x2360, addmod(mload(0x7c0), mload(0x2340), f_q))
            mstore(0x2380, addmod(mload(0x2360), mload(0x400), f_q))
            mstore(0x23a0, mulmod(mload(0x2380), mload(0x2300), f_q))
            mstore(0x23c0, mulmod(mload(0x23a0), mload(0xa40), f_q))
            mstore(0x23e0, addmod(mload(0x21e0), sub(f_q, mload(0x23c0)), f_q))
            mstore(0x2400, mulmod(mload(0x23e0), mload(0x2060), f_q))
            mstore(0x2420, addmod(mload(0x1fa0), mload(0x2400), f_q))
            mstore(0x2440, mulmod(mload(0x5e0), mload(0x2420), f_q))
            mstore(0x2460, mulmod(mload(0xa00), mload(0x3a0), f_q))
            mstore(0x2480, addmod(mload(0x1580), mload(0x2460), f_q))
            mstore(0x24a0, addmod(mload(0x2480), mload(0x400), f_q))
            mstore(0x24c0, mulmod(mload(0xa20), mload(0x3a0), f_q))
            mstore(0x24e0, addmod(mload(0x800), mload(0x24c0), f_q))
            mstore(0x2500, addmod(mload(0x24e0), mload(0x400), f_q))
            mstore(0x2520, mulmod(mload(0x2500), mload(0x24a0), f_q))
            mstore(0x2540, mulmod(mload(0x2520), mload(0xac0), f_q))
            mstore(
                0x2560,
                mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x3a0), f_q)
            )
            mstore(0x2580, mulmod(mload(0x740), mload(0x2560), f_q))
            mstore(0x25a0, addmod(mload(0x1580), mload(0x2580), f_q))
            mstore(0x25c0, addmod(mload(0x25a0), mload(0x400), f_q))
            mstore(
                0x25e0,
                mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x3a0), f_q)
            )
            mstore(0x2600, mulmod(mload(0x740), mload(0x25e0), f_q))
            mstore(0x2620, addmod(mload(0x800), mload(0x2600), f_q))
            mstore(0x2640, addmod(mload(0x2620), mload(0x400), f_q))
            mstore(0x2660, mulmod(mload(0x2640), mload(0x25c0), f_q))
            mstore(0x2680, mulmod(mload(0x2660), mload(0xaa0), f_q))
            mstore(0x26a0, addmod(mload(0x2540), sub(f_q, mload(0x2680)), f_q))
            mstore(0x26c0, mulmod(mload(0x26a0), mload(0x2060), f_q))
            mstore(0x26e0, addmod(mload(0x2440), mload(0x26c0), f_q))
            mstore(0x2700, mulmod(mload(0x5e0), mload(0x26e0), f_q))
            mstore(0x2720, addmod(1, sub(f_q, mload(0xae0)), f_q))
            mstore(0x2740, mulmod(mload(0x2720), mload(0x1540), f_q))
            mstore(0x2760, addmod(mload(0x2700), mload(0x2740), f_q))
            mstore(0x2780, mulmod(mload(0x5e0), mload(0x2760), f_q))
            mstore(0x27a0, mulmod(mload(0xae0), mload(0xae0), f_q))
            mstore(0x27c0, addmod(mload(0x27a0), sub(f_q, mload(0xae0)), f_q))
            mstore(0x27e0, mulmod(mload(0x27c0), mload(0x1480), f_q))
            mstore(0x2800, addmod(mload(0x2780), mload(0x27e0), f_q))
            mstore(0x2820, mulmod(mload(0x5e0), mload(0x2800), f_q))
            mstore(0x2840, addmod(mload(0xb20), mload(0x3a0), f_q))
            mstore(0x2860, mulmod(mload(0x2840), mload(0xb00), f_q))
            mstore(0x2880, addmod(mload(0xb60), mload(0x400), f_q))
            mstore(0x28a0, mulmod(mload(0x2880), mload(0x2860), f_q))
            mstore(0x28c0, mulmod(mload(0x780), mload(0x8a0), f_q))
            mstore(0x28e0, addmod(1, sub(f_q, mload(0x8a0)), f_q))
            mstore(0x2900, mulmod(mload(0x28e0), 0, f_q))
            mstore(0x2920, addmod(mload(0x28c0), mload(0x2900), f_q))
            mstore(0x2940, mulmod(mload(0x1c0), mload(0x2920), f_q))
            mstore(0x2960, mulmod(mload(0x7a0), mload(0x8a0), f_q))
            mstore(0x2980, addmod(mload(0x2960), mload(0x2900), f_q))
            mstore(0x29a0, addmod(mload(0x2940), mload(0x2980), f_q))
            mstore(0x29c0, addmod(mload(0x29a0), mload(0x3a0), f_q))
            mstore(0x29e0, mulmod(mload(0x29c0), mload(0xae0), f_q))
            mstore(0x2a00, mulmod(mload(0x1c0), mload(0x820), f_q))
            mstore(0x2a20, addmod(mload(0x2a00), mload(0x840), f_q))
            mstore(0x2a40, addmod(mload(0x2a20), mload(0x400), f_q))
            mstore(0x2a60, mulmod(mload(0x2a40), mload(0x29e0), f_q))
            mstore(0x2a80, addmod(mload(0x28a0), sub(f_q, mload(0x2a60)), f_q))
            mstore(0x2aa0, mulmod(mload(0x2a80), mload(0x2060), f_q))
            mstore(0x2ac0, addmod(mload(0x2820), mload(0x2aa0), f_q))
            mstore(0x2ae0, mulmod(mload(0x5e0), mload(0x2ac0), f_q))
            mstore(0x2b00, addmod(mload(0xb20), sub(f_q, mload(0xb60)), f_q))
            mstore(0x2b20, mulmod(mload(0x2b00), mload(0x1540), f_q))
            mstore(0x2b40, addmod(mload(0x2ae0), mload(0x2b20), f_q))
            mstore(0x2b60, mulmod(mload(0x5e0), mload(0x2b40), f_q))
            mstore(0x2b80, mulmod(mload(0x2b00), mload(0x2060), f_q))
            mstore(0x2ba0, addmod(mload(0xb20), sub(f_q, mload(0xb40)), f_q))
            mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x2b80), f_q))
            mstore(0x2be0, addmod(mload(0x2b60), mload(0x2bc0), f_q))
            mstore(0x2c00, mulmod(mload(0x5e0), mload(0x2be0), f_q))
            mstore(0x2c20, addmod(1, sub(f_q, mload(0xb80)), f_q))
            mstore(0x2c40, mulmod(mload(0x2c20), mload(0x1540), f_q))
            mstore(0x2c60, addmod(mload(0x2c00), mload(0x2c40), f_q))
            mstore(0x2c80, mulmod(mload(0x5e0), mload(0x2c60), f_q))
            mstore(0x2ca0, mulmod(mload(0xb80), mload(0xb80), f_q))
            mstore(0x2cc0, addmod(mload(0x2ca0), sub(f_q, mload(0xb80)), f_q))
            mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0x1480), f_q))
            mstore(0x2d00, addmod(mload(0x2c80), mload(0x2ce0), f_q))
            mstore(0x2d20, mulmod(mload(0x5e0), mload(0x2d00), f_q))
            mstore(0x2d40, addmod(mload(0xbc0), mload(0x3a0), f_q))
            mstore(0x2d60, mulmod(mload(0x2d40), mload(0xba0), f_q))
            mstore(0x2d80, addmod(mload(0xc00), mload(0x400), f_q))
            mstore(0x2da0, mulmod(mload(0x2d80), mload(0x2d60), f_q))
            mstore(0x2dc0, mulmod(mload(0x780), mload(0x8c0), f_q))
            mstore(0x2de0, addmod(1, sub(f_q, mload(0x8c0)), f_q))
            mstore(0x2e00, mulmod(mload(0x2de0), 0, f_q))
            mstore(0x2e20, addmod(mload(0x2dc0), mload(0x2e00), f_q))
            mstore(0x2e40, mulmod(mload(0x1c0), mload(0x2e20), f_q))
            mstore(0x2e60, mulmod(mload(0x7a0), mload(0x8c0), f_q))
            mstore(0x2e80, mulmod(mload(0x2de0), 170141183460469231731687303715884105727, f_q))
            mstore(0x2ea0, addmod(mload(0x2e60), mload(0x2e80), f_q))
            mstore(0x2ec0, addmod(mload(0x2e40), mload(0x2ea0), f_q))
            mstore(0x2ee0, addmod(mload(0x2ec0), mload(0x3a0), f_q))
            mstore(0x2f00, mulmod(mload(0x2ee0), mload(0xb80), f_q))
            mstore(0x2f20, addmod(mload(0x2a00), mload(0x860), f_q))
            mstore(0x2f40, addmod(mload(0x2f20), mload(0x400), f_q))
            mstore(0x2f60, mulmod(mload(0x2f40), mload(0x2f00), f_q))
            mstore(0x2f80, addmod(mload(0x2da0), sub(f_q, mload(0x2f60)), f_q))
            mstore(0x2fa0, mulmod(mload(0x2f80), mload(0x2060), f_q))
            mstore(0x2fc0, addmod(mload(0x2d20), mload(0x2fa0), f_q))
            mstore(0x2fe0, mulmod(mload(0x5e0), mload(0x2fc0), f_q))
            mstore(0x3000, addmod(mload(0xbc0), sub(f_q, mload(0xc00)), f_q))
            mstore(0x3020, mulmod(mload(0x3000), mload(0x1540), f_q))
            mstore(0x3040, addmod(mload(0x2fe0), mload(0x3020), f_q))
            mstore(0x3060, mulmod(mload(0x5e0), mload(0x3040), f_q))
            mstore(0x3080, mulmod(mload(0x3000), mload(0x2060), f_q))
            mstore(0x30a0, addmod(mload(0xbc0), sub(f_q, mload(0xbe0)), f_q))
            mstore(0x30c0, mulmod(mload(0x30a0), mload(0x3080), f_q))
            mstore(0x30e0, addmod(mload(0x3060), mload(0x30c0), f_q))
            mstore(0x3100, mulmod(mload(0x5e0), mload(0x30e0), f_q))
            mstore(0x3120, addmod(1, sub(f_q, mload(0xc20)), f_q))
            mstore(0x3140, mulmod(mload(0x3120), mload(0x1540), f_q))
            mstore(0x3160, addmod(mload(0x3100), mload(0x3140), f_q))
            mstore(0x3180, mulmod(mload(0x5e0), mload(0x3160), f_q))
            mstore(0x31a0, mulmod(mload(0xc20), mload(0xc20), f_q))
            mstore(0x31c0, addmod(mload(0x31a0), sub(f_q, mload(0xc20)), f_q))
            mstore(0x31e0, mulmod(mload(0x31c0), mload(0x1480), f_q))
            mstore(0x3200, addmod(mload(0x3180), mload(0x31e0), f_q))
            mstore(0x3220, mulmod(mload(0x5e0), mload(0x3200), f_q))
            mstore(0x3240, addmod(mload(0xc60), mload(0x3a0), f_q))
            mstore(0x3260, mulmod(mload(0x3240), mload(0xc40), f_q))
            mstore(0x3280, addmod(mload(0xca0), mload(0x400), f_q))
            mstore(0x32a0, mulmod(mload(0x3280), mload(0x3260), f_q))
            mstore(0x32c0, mulmod(mload(0x780), mload(0x8e0), f_q))
            mstore(0x32e0, addmod(1, sub(f_q, mload(0x8e0)), f_q))
            mstore(0x3300, mulmod(mload(0x32e0), 0, f_q))
            mstore(0x3320, addmod(mload(0x32c0), mload(0x3300), f_q))
            mstore(0x3340, mulmod(mload(0x1c0), mload(0x3320), f_q))
            mstore(0x3360, mulmod(mload(0x7a0), mload(0x8e0), f_q))
            mstore(0x3380, mulmod(mload(0x32e0), 64, f_q))
            mstore(0x33a0, addmod(mload(0x3360), mload(0x3380), f_q))
            mstore(0x33c0, addmod(mload(0x3340), mload(0x33a0), f_q))
            mstore(0x33e0, addmod(mload(0x33c0), mload(0x3a0), f_q))
            mstore(0x3400, mulmod(mload(0x33e0), mload(0xc20), f_q))
            mstore(0x3420, addmod(mload(0x2a00), mload(0x880), f_q))
            mstore(0x3440, addmod(mload(0x3420), mload(0x400), f_q))
            mstore(0x3460, mulmod(mload(0x3440), mload(0x3400), f_q))
            mstore(0x3480, addmod(mload(0x32a0), sub(f_q, mload(0x3460)), f_q))
            mstore(0x34a0, mulmod(mload(0x3480), mload(0x2060), f_q))
            mstore(0x34c0, addmod(mload(0x3220), mload(0x34a0), f_q))
            mstore(0x34e0, mulmod(mload(0x5e0), mload(0x34c0), f_q))
            mstore(0x3500, addmod(mload(0xc60), sub(f_q, mload(0xca0)), f_q))
            mstore(0x3520, mulmod(mload(0x3500), mload(0x1540), f_q))
            mstore(0x3540, addmod(mload(0x34e0), mload(0x3520), f_q))
            mstore(0x3560, mulmod(mload(0x5e0), mload(0x3540), f_q))
            mstore(0x3580, mulmod(mload(0x3500), mload(0x2060), f_q))
            mstore(0x35a0, addmod(mload(0xc60), sub(f_q, mload(0xc80)), f_q))
            mstore(0x35c0, mulmod(mload(0x35a0), mload(0x3580), f_q))
            mstore(0x35e0, addmod(mload(0x3560), mload(0x35c0), f_q))
            mstore(0x3600, mulmod(mload(0x1040), mload(0x1040), f_q))
            mstore(0x3620, mulmod(mload(0x3600), mload(0x1040), f_q))
            mstore(0x3640, mulmod(mload(0x3620), mload(0x1040), f_q))
            mstore(0x3660, mulmod(1, mload(0x1040), f_q))
            mstore(0x3680, mulmod(1, mload(0x3600), f_q))
            mstore(0x36a0, mulmod(1, mload(0x3620), f_q))
            mstore(0x36c0, mulmod(mload(0x35e0), mload(0x1060), f_q))
            mstore(0x36e0, mulmod(mload(0xe40), mload(0xe40), f_q))
            mstore(0x3700, mulmod(mload(0x36e0), mload(0xe40), f_q))
            mstore(0x3720, mulmod(mload(0x3700), mload(0xe40), f_q))
            mstore(0x3740, mulmod(mload(0xce0), mload(0xce0), f_q))
            mstore(0x3760, mulmod(mload(0x3740), mload(0xce0), f_q))
            mstore(0x3780, mulmod(mload(0x3760), mload(0xce0), f_q))
            mstore(0x37a0, mulmod(mload(0x3780), mload(0xce0), f_q))
            mstore(0x37c0, mulmod(mload(0x37a0), mload(0xce0), f_q))
            mstore(0x37e0, mulmod(mload(0x37c0), mload(0xce0), f_q))
            mstore(0x3800, mulmod(mload(0x37e0), mload(0xce0), f_q))
            mstore(0x3820, mulmod(mload(0x3800), mload(0xce0), f_q))
            mstore(0x3840, mulmod(mload(0x3820), mload(0xce0), f_q))
            mstore(0x3860, mulmod(mload(0x3840), mload(0xce0), f_q))
            mstore(0x3880, mulmod(mload(0x3860), mload(0xce0), f_q))
            mstore(0x38a0, mulmod(mload(0x3880), mload(0xce0), f_q))
            mstore(0x38c0, mulmod(mload(0x38a0), mload(0xce0), f_q))
            mstore(0x38e0, mulmod(mload(0x38c0), mload(0xce0), f_q))
            mstore(0x3900, mulmod(mload(0x38e0), mload(0xce0), f_q))
            mstore(0x3920, mulmod(mload(0x3900), mload(0xce0), f_q))
            mstore(0x3940, mulmod(mload(0x3920), mload(0xce0), f_q))
            mstore(0x3960, mulmod(mload(0x3940), mload(0xce0), f_q))
            mstore(0x3980, mulmod(mload(0x3960), mload(0xce0), f_q))
            mstore(0x39a0, mulmod(mload(0x3980), mload(0xce0), f_q))
            mstore(0x39c0, mulmod(mload(0x39a0), mload(0xce0), f_q))
            mstore(0x39e0, mulmod(mload(0x39c0), mload(0xce0), f_q))
            mstore(0x3a00, mulmod(mload(0x39e0), mload(0xce0), f_q))
            mstore(0x3a20, mulmod(mload(0x3a00), mload(0xce0), f_q))
            mstore(0x3a40, mulmod(mload(0x3a20), mload(0xce0), f_q))
            mstore(0x3a60, mulmod(mload(0x3a40), mload(0xce0), f_q))
            mstore(0x3a80, mulmod(mload(0x3a60), mload(0xce0), f_q))
            mstore(0x3aa0, mulmod(mload(0x3a80), mload(0xce0), f_q))
            mstore(0x3ac0, mulmod(mload(0x3aa0), mload(0xce0), f_q))
            mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0xce0), f_q))
            mstore(0x3b00, mulmod(mload(0x3ae0), mload(0xce0), f_q))
            mstore(0x3b20, mulmod(mload(0x3b00), mload(0xce0), f_q))
            mstore(0x3b40, mulmod(sub(f_q, mload(0x780)), 1, f_q))
            mstore(0x3b60, mulmod(sub(f_q, mload(0x7a0)), mload(0xce0), f_q))
            mstore(0x3b80, mulmod(1, mload(0xce0), f_q))
            mstore(0x3ba0, addmod(mload(0x3b40), mload(0x3b60), f_q))
            mstore(0x3bc0, mulmod(sub(f_q, mload(0x7c0)), mload(0x3740), f_q))
            mstore(0x3be0, mulmod(1, mload(0x3740), f_q))
            mstore(0x3c00, addmod(mload(0x3ba0), mload(0x3bc0), f_q))
            mstore(0x3c20, mulmod(sub(f_q, mload(0xa40)), mload(0x3760), f_q))
            mstore(0x3c40, mulmod(1, mload(0x3760), f_q))
            mstore(0x3c60, addmod(mload(0x3c00), mload(0x3c20), f_q))
            mstore(0x3c80, mulmod(sub(f_q, mload(0xaa0)), mload(0x3780), f_q))
            mstore(0x3ca0, mulmod(1, mload(0x3780), f_q))
            mstore(0x3cc0, addmod(mload(0x3c60), mload(0x3c80), f_q))
            mstore(0x3ce0, mulmod(sub(f_q, mload(0xae0)), mload(0x37a0), f_q))
            mstore(0x3d00, mulmod(1, mload(0x37a0), f_q))
            mstore(0x3d20, addmod(mload(0x3cc0), mload(0x3ce0), f_q))
            mstore(0x3d40, mulmod(sub(f_q, mload(0xb20)), mload(0x37c0), f_q))
            mstore(0x3d60, mulmod(1, mload(0x37c0), f_q))
            mstore(0x3d80, addmod(mload(0x3d20), mload(0x3d40), f_q))
            mstore(0x3da0, mulmod(sub(f_q, mload(0xb60)), mload(0x37e0), f_q))
            mstore(0x3dc0, mulmod(1, mload(0x37e0), f_q))
            mstore(0x3de0, addmod(mload(0x3d80), mload(0x3da0), f_q))
            mstore(0x3e00, mulmod(sub(f_q, mload(0xb80)), mload(0x3800), f_q))
            mstore(0x3e20, mulmod(1, mload(0x3800), f_q))
            mstore(0x3e40, addmod(mload(0x3de0), mload(0x3e00), f_q))
            mstore(0x3e60, mulmod(sub(f_q, mload(0xbc0)), mload(0x3820), f_q))
            mstore(0x3e80, mulmod(1, mload(0x3820), f_q))
            mstore(0x3ea0, addmod(mload(0x3e40), mload(0x3e60), f_q))
            mstore(0x3ec0, mulmod(sub(f_q, mload(0xc00)), mload(0x3840), f_q))
            mstore(0x3ee0, mulmod(1, mload(0x3840), f_q))
            mstore(0x3f00, addmod(mload(0x3ea0), mload(0x3ec0), f_q))
            mstore(0x3f20, mulmod(sub(f_q, mload(0xc20)), mload(0x3860), f_q))
            mstore(0x3f40, mulmod(1, mload(0x3860), f_q))
            mstore(0x3f60, addmod(mload(0x3f00), mload(0x3f20), f_q))
            mstore(0x3f80, mulmod(sub(f_q, mload(0xc60)), mload(0x3880), f_q))
            mstore(0x3fa0, mulmod(1, mload(0x3880), f_q))
            mstore(0x3fc0, addmod(mload(0x3f60), mload(0x3f80), f_q))
            mstore(0x3fe0, mulmod(sub(f_q, mload(0xca0)), mload(0x38a0), f_q))
            mstore(0x4000, mulmod(1, mload(0x38a0), f_q))
            mstore(0x4020, addmod(mload(0x3fc0), mload(0x3fe0), f_q))
            mstore(0x4040, mulmod(sub(f_q, mload(0x800)), mload(0x38c0), f_q))
            mstore(0x4060, mulmod(1, mload(0x38c0), f_q))
            mstore(0x4080, addmod(mload(0x4020), mload(0x4040), f_q))
            mstore(0x40a0, mulmod(sub(f_q, mload(0x820)), mload(0x38e0), f_q))
            mstore(0x40c0, mulmod(1, mload(0x38e0), f_q))
            mstore(0x40e0, addmod(mload(0x4080), mload(0x40a0), f_q))
            mstore(0x4100, mulmod(sub(f_q, mload(0x840)), mload(0x3900), f_q))
            mstore(0x4120, mulmod(1, mload(0x3900), f_q))
            mstore(0x4140, addmod(mload(0x40e0), mload(0x4100), f_q))
            mstore(0x4160, mulmod(sub(f_q, mload(0x860)), mload(0x3920), f_q))
            mstore(0x4180, mulmod(1, mload(0x3920), f_q))
            mstore(0x41a0, addmod(mload(0x4140), mload(0x4160), f_q))
            mstore(0x41c0, mulmod(sub(f_q, mload(0x880)), mload(0x3940), f_q))
            mstore(0x41e0, mulmod(1, mload(0x3940), f_q))
            mstore(0x4200, addmod(mload(0x41a0), mload(0x41c0), f_q))
            mstore(0x4220, mulmod(sub(f_q, mload(0x8a0)), mload(0x3960), f_q))
            mstore(0x4240, mulmod(1, mload(0x3960), f_q))
            mstore(0x4260, addmod(mload(0x4200), mload(0x4220), f_q))
            mstore(0x4280, mulmod(sub(f_q, mload(0x8c0)), mload(0x3980), f_q))
            mstore(0x42a0, mulmod(1, mload(0x3980), f_q))
            mstore(0x42c0, addmod(mload(0x4260), mload(0x4280), f_q))
            mstore(0x42e0, mulmod(sub(f_q, mload(0x8e0)), mload(0x39a0), f_q))
            mstore(0x4300, mulmod(1, mload(0x39a0), f_q))
            mstore(0x4320, addmod(mload(0x42c0), mload(0x42e0), f_q))
            mstore(0x4340, mulmod(sub(f_q, mload(0x900)), mload(0x39c0), f_q))
            mstore(0x4360, mulmod(1, mload(0x39c0), f_q))
            mstore(0x4380, addmod(mload(0x4320), mload(0x4340), f_q))
            mstore(0x43a0, mulmod(sub(f_q, mload(0x920)), mload(0x39e0), f_q))
            mstore(0x43c0, mulmod(1, mload(0x39e0), f_q))
            mstore(0x43e0, addmod(mload(0x4380), mload(0x43a0), f_q))
            mstore(0x4400, mulmod(sub(f_q, mload(0x940)), mload(0x3a00), f_q))
            mstore(0x4420, mulmod(1, mload(0x3a00), f_q))
            mstore(0x4440, addmod(mload(0x43e0), mload(0x4400), f_q))
            mstore(0x4460, mulmod(sub(f_q, mload(0x960)), mload(0x3a20), f_q))
            mstore(0x4480, mulmod(1, mload(0x3a20), f_q))
            mstore(0x44a0, addmod(mload(0x4440), mload(0x4460), f_q))
            mstore(0x44c0, addmod(mload(0x4060), mload(0x4480), f_q))
            mstore(0x44e0, mulmod(sub(f_q, mload(0x9a0)), mload(0x3a40), f_q))
            mstore(0x4500, mulmod(1, mload(0x3a40), f_q))
            mstore(0x4520, addmod(mload(0x44a0), mload(0x44e0), f_q))
            mstore(0x4540, mulmod(sub(f_q, mload(0x9c0)), mload(0x3a60), f_q))
            mstore(0x4560, mulmod(1, mload(0x3a60), f_q))
            mstore(0x4580, addmod(mload(0x4520), mload(0x4540), f_q))
            mstore(0x45a0, mulmod(sub(f_q, mload(0x9e0)), mload(0x3a80), f_q))
            mstore(0x45c0, mulmod(1, mload(0x3a80), f_q))
            mstore(0x45e0, addmod(mload(0x4580), mload(0x45a0), f_q))
            mstore(0x4600, mulmod(sub(f_q, mload(0xa00)), mload(0x3aa0), f_q))
            mstore(0x4620, mulmod(1, mload(0x3aa0), f_q))
            mstore(0x4640, addmod(mload(0x45e0), mload(0x4600), f_q))
            mstore(0x4660, mulmod(sub(f_q, mload(0xa20)), mload(0x3ac0), f_q))
            mstore(0x4680, mulmod(1, mload(0x3ac0), f_q))
            mstore(0x46a0, addmod(mload(0x4640), mload(0x4660), f_q))
            mstore(0x46c0, mulmod(sub(f_q, mload(0x36c0)), mload(0x3ae0), f_q))
            mstore(0x46e0, mulmod(1, mload(0x3ae0), f_q))
            mstore(0x4700, mulmod(mload(0x3660), mload(0x3ae0), f_q))
            mstore(0x4720, mulmod(mload(0x3680), mload(0x3ae0), f_q))
            mstore(0x4740, mulmod(mload(0x36a0), mload(0x3ae0), f_q))
            mstore(0x4760, addmod(mload(0x46a0), mload(0x46c0), f_q))
            mstore(0x4780, mulmod(sub(f_q, mload(0x980)), mload(0x3b00), f_q))
            mstore(0x47a0, mulmod(1, mload(0x3b00), f_q))
            mstore(0x47c0, addmod(mload(0x4760), mload(0x4780), f_q))
            mstore(0x47e0, mulmod(mload(0x47c0), 1, f_q))
            mstore(0x4800, mulmod(mload(0x3b80), 1, f_q))
            mstore(0x4820, mulmod(mload(0x3be0), 1, f_q))
            mstore(0x4840, mulmod(mload(0x3c40), 1, f_q))
            mstore(0x4860, mulmod(mload(0x3ca0), 1, f_q))
            mstore(0x4880, mulmod(mload(0x3d00), 1, f_q))
            mstore(0x48a0, mulmod(mload(0x3d60), 1, f_q))
            mstore(0x48c0, mulmod(mload(0x3dc0), 1, f_q))
            mstore(0x48e0, mulmod(mload(0x3e20), 1, f_q))
            mstore(0x4900, mulmod(mload(0x3e80), 1, f_q))
            mstore(0x4920, mulmod(mload(0x3ee0), 1, f_q))
            mstore(0x4940, mulmod(mload(0x3f40), 1, f_q))
            mstore(0x4960, mulmod(mload(0x3fa0), 1, f_q))
            mstore(0x4980, mulmod(mload(0x4000), 1, f_q))
            mstore(0x49a0, mulmod(mload(0x44c0), 1, f_q))
            mstore(0x49c0, mulmod(mload(0x40c0), 1, f_q))
            mstore(0x49e0, mulmod(mload(0x4120), 1, f_q))
            mstore(0x4a00, mulmod(mload(0x4180), 1, f_q))
            mstore(0x4a20, mulmod(mload(0x41e0), 1, f_q))
            mstore(0x4a40, mulmod(mload(0x4240), 1, f_q))
            mstore(0x4a60, mulmod(mload(0x42a0), 1, f_q))
            mstore(0x4a80, mulmod(mload(0x4300), 1, f_q))
            mstore(0x4aa0, mulmod(mload(0x4360), 1, f_q))
            mstore(0x4ac0, mulmod(mload(0x43c0), 1, f_q))
            mstore(0x4ae0, mulmod(mload(0x4420), 1, f_q))
            mstore(0x4b00, mulmod(mload(0x4500), 1, f_q))
            mstore(0x4b20, mulmod(mload(0x4560), 1, f_q))
            mstore(0x4b40, mulmod(mload(0x45c0), 1, f_q))
            mstore(0x4b60, mulmod(mload(0x4620), 1, f_q))
            mstore(0x4b80, mulmod(mload(0x4680), 1, f_q))
            mstore(0x4ba0, mulmod(mload(0x46e0), 1, f_q))
            mstore(0x4bc0, mulmod(mload(0x4700), 1, f_q))
            mstore(0x4be0, mulmod(mload(0x4720), 1, f_q))
            mstore(0x4c00, mulmod(mload(0x4740), 1, f_q))
            mstore(0x4c20, mulmod(mload(0x47a0), 1, f_q))
            mstore(0x4c40, mulmod(sub(f_q, mload(0x7e0)), 1, f_q))
            mstore(0x4c60, mulmod(sub(f_q, mload(0xb40)), mload(0xce0), f_q))
            mstore(0x4c80, addmod(mload(0x4c40), mload(0x4c60), f_q))
            mstore(0x4ca0, mulmod(sub(f_q, mload(0xbe0)), mload(0x3740), f_q))
            mstore(0x4cc0, addmod(mload(0x4c80), mload(0x4ca0), f_q))
            mstore(0x4ce0, mulmod(sub(f_q, mload(0xc80)), mload(0x3760), f_q))
            mstore(0x4d00, addmod(mload(0x4cc0), mload(0x4ce0), f_q))
            mstore(0x4d20, mulmod(mload(0x4d00), mload(0xe40), f_q))
            mstore(0x4d40, mulmod(1, mload(0xe40), f_q))
            mstore(0x4d60, mulmod(mload(0x3b80), mload(0xe40), f_q))
            mstore(0x4d80, mulmod(mload(0x3be0), mload(0xe40), f_q))
            mstore(0x4da0, mulmod(mload(0x3c40), mload(0xe40), f_q))
            mstore(0x4dc0, addmod(mload(0x47e0), mload(0x4d20), f_q))
            mstore(0x4de0, addmod(mload(0x4820), mload(0x4d40), f_q))
            mstore(0x4e00, addmod(mload(0x48a0), mload(0x4d60), f_q))
            mstore(0x4e20, addmod(mload(0x4900), mload(0x4d80), f_q))
            mstore(0x4e40, addmod(mload(0x4960), mload(0x4da0), f_q))
            mstore(0x4e60, mulmod(sub(f_q, mload(0xa60)), 1, f_q))
            mstore(0x4e80, mulmod(sub(f_q, mload(0xac0)), mload(0xce0), f_q))
            mstore(0x4ea0, addmod(mload(0x4e60), mload(0x4e80), f_q))
            mstore(0x4ec0, mulmod(sub(f_q, mload(0xb00)), mload(0x3740), f_q))
            mstore(0x4ee0, addmod(mload(0x4ea0), mload(0x4ec0), f_q))
            mstore(0x4f00, mulmod(sub(f_q, mload(0xba0)), mload(0x3760), f_q))
            mstore(0x4f20, addmod(mload(0x4ee0), mload(0x4f00), f_q))
            mstore(0x4f40, mulmod(sub(f_q, mload(0xc40)), mload(0x3780), f_q))
            mstore(0x4f60, addmod(mload(0x4f20), mload(0x4f40), f_q))
            mstore(0x4f80, mulmod(mload(0x4f60), mload(0x36e0), f_q))
            mstore(0x4fa0, mulmod(1, mload(0x36e0), f_q))
            mstore(0x4fc0, mulmod(mload(0x3b80), mload(0x36e0), f_q))
            mstore(0x4fe0, mulmod(mload(0x3be0), mload(0x36e0), f_q))
            mstore(0x5000, mulmod(mload(0x3c40), mload(0x36e0), f_q))
            mstore(0x5020, mulmod(mload(0x3ca0), mload(0x36e0), f_q))
            mstore(0x5040, addmod(mload(0x4dc0), mload(0x4f80), f_q))
            mstore(0x5060, addmod(mload(0x4840), mload(0x4fa0), f_q))
            mstore(0x5080, addmod(mload(0x4860), mload(0x4fc0), f_q))
            mstore(0x50a0, addmod(mload(0x4880), mload(0x4fe0), f_q))
            mstore(0x50c0, addmod(mload(0x48e0), mload(0x5000), f_q))
            mstore(0x50e0, addmod(mload(0x4940), mload(0x5020), f_q))
            mstore(0x5100, mulmod(sub(f_q, mload(0xa80)), 1, f_q))
            mstore(0x5120, mulmod(mload(0x5100), mload(0x3700), f_q))
            mstore(0x5140, mulmod(1, mload(0x3700), f_q))
            mstore(0x5160, addmod(mload(0x5040), mload(0x5120), f_q))
            mstore(0x5180, addmod(mload(0x5060), mload(0x5140), f_q))
            mstore(0x51a0, mulmod(1, mload(0x740), f_q))
            mstore(0x51c0, mulmod(1, mload(0x51a0), f_q))
            mstore(
                0x51e0,
                mulmod(14204982954615820785730815556166377574172276341958019443243371773666809943588, mload(0x740), f_q)
            )
            mstore(0x5200, mulmod(mload(0x4d40), mload(0x51e0), f_q))
            mstore(
                0x5220,
                mulmod(19671853614403325433334785013442879012032153960035114761748042217991436932142, mload(0x740), f_q)
            )
            mstore(0x5240, mulmod(mload(0x4fa0), mload(0x5220), f_q))
            mstore(
                0x5260,
                mulmod(16352530144570232727633744131804667993120004373047725463318648550785966993151, mload(0x740), f_q)
            )
            mstore(0x5280, mulmod(mload(0x5140), mload(0x5260), f_q))
            mstore(0x52a0, 0x0000000000000000000000000000000000000000000000000000000000000001)
            mstore(0x52c0, 0x0000000000000000000000000000000000000000000000000000000000000002)
            mstore(0x52e0, mload(0x5160))
            success := and(eq(staticcall(gas(), 0x7, 0x52a0, 0x60, 0x52a0, 0x40), 1), success)
            mstore(0x5300, mload(0x52a0))
            mstore(0x5320, mload(0x52c0))
            mstore(0x5340, mload(0xe0))
            mstore(0x5360, mload(0x100))
            success := and(eq(staticcall(gas(), 0x6, 0x5300, 0x80, 0x5300, 0x40), 1), success)
            mstore(0x5380, mload(0x120))
            mstore(0x53a0, mload(0x140))
            mstore(0x53c0, mload(0x4800))
            success := and(eq(staticcall(gas(), 0x7, 0x5380, 0x60, 0x5380, 0x40), 1), success)
            mstore(0x53e0, mload(0x5300))
            mstore(0x5400, mload(0x5320))
            mstore(0x5420, mload(0x5380))
            mstore(0x5440, mload(0x53a0))
            success := and(eq(staticcall(gas(), 0x6, 0x53e0, 0x80, 0x53e0, 0x40), 1), success)
            mstore(0x5460, mload(0x160))
            mstore(0x5480, mload(0x180))
            mstore(0x54a0, mload(0x4de0))
            success := and(eq(staticcall(gas(), 0x7, 0x5460, 0x60, 0x5460, 0x40), 1), success)
            mstore(0x54c0, mload(0x53e0))
            mstore(0x54e0, mload(0x5400))
            mstore(0x5500, mload(0x5460))
            mstore(0x5520, mload(0x5480))
            success := and(eq(staticcall(gas(), 0x6, 0x54c0, 0x80, 0x54c0, 0x40), 1), success)
            mstore(0x5540, mload(0x440))
            mstore(0x5560, mload(0x460))
            mstore(0x5580, mload(0x5180))
            success := and(eq(staticcall(gas(), 0x7, 0x5540, 0x60, 0x5540, 0x40), 1), success)
            mstore(0x55a0, mload(0x54c0))
            mstore(0x55c0, mload(0x54e0))
            mstore(0x55e0, mload(0x5540))
            mstore(0x5600, mload(0x5560))
            success := and(eq(staticcall(gas(), 0x6, 0x55a0, 0x80, 0x55a0, 0x40), 1), success)
            mstore(0x5620, mload(0x480))
            mstore(0x5640, mload(0x4a0))
            mstore(0x5660, mload(0x5080))
            success := and(eq(staticcall(gas(), 0x7, 0x5620, 0x60, 0x5620, 0x40), 1), success)
            mstore(0x5680, mload(0x55a0))
            mstore(0x56a0, mload(0x55c0))
            mstore(0x56c0, mload(0x5620))
            mstore(0x56e0, mload(0x5640))
            success := and(eq(staticcall(gas(), 0x6, 0x5680, 0x80, 0x5680, 0x40), 1), success)
            mstore(0x5700, mload(0x4c0))
            mstore(0x5720, mload(0x4e0))
            mstore(0x5740, mload(0x50a0))
            success := and(eq(staticcall(gas(), 0x7, 0x5700, 0x60, 0x5700, 0x40), 1), success)
            mstore(0x5760, mload(0x5680))
            mstore(0x5780, mload(0x56a0))
            mstore(0x57a0, mload(0x5700))
            mstore(0x57c0, mload(0x5720))
            success := and(eq(staticcall(gas(), 0x6, 0x5760, 0x80, 0x5760, 0x40), 1), success)
            mstore(0x57e0, mload(0x200))
            mstore(0x5800, mload(0x220))
            mstore(0x5820, mload(0x4e00))
            success := and(eq(staticcall(gas(), 0x7, 0x57e0, 0x60, 0x57e0, 0x40), 1), success)
            mstore(0x5840, mload(0x5760))
            mstore(0x5860, mload(0x5780))
            mstore(0x5880, mload(0x57e0))
            mstore(0x58a0, mload(0x5800))
            success := and(eq(staticcall(gas(), 0x6, 0x5840, 0x80, 0x5840, 0x40), 1), success)
            mstore(0x58c0, mload(0x240))
            mstore(0x58e0, mload(0x260))
            mstore(0x5900, mload(0x48c0))
            success := and(eq(staticcall(gas(), 0x7, 0x58c0, 0x60, 0x58c0, 0x40), 1), success)
            mstore(0x5920, mload(0x5840))
            mstore(0x5940, mload(0x5860))
            mstore(0x5960, mload(0x58c0))
            mstore(0x5980, mload(0x58e0))
            success := and(eq(staticcall(gas(), 0x6, 0x5920, 0x80, 0x5920, 0x40), 1), success)
            mstore(0x59a0, mload(0x500))
            mstore(0x59c0, mload(0x520))
            mstore(0x59e0, mload(0x50c0))
            success := and(eq(staticcall(gas(), 0x7, 0x59a0, 0x60, 0x59a0, 0x40), 1), success)
            mstore(0x5a00, mload(0x5920))
            mstore(0x5a20, mload(0x5940))
            mstore(0x5a40, mload(0x59a0))
            mstore(0x5a60, mload(0x59c0))
            success := and(eq(staticcall(gas(), 0x6, 0x5a00, 0x80, 0x5a00, 0x40), 1), success)
            mstore(0x5a80, mload(0x280))
            mstore(0x5aa0, mload(0x2a0))
            mstore(0x5ac0, mload(0x4e20))
            success := and(eq(staticcall(gas(), 0x7, 0x5a80, 0x60, 0x5a80, 0x40), 1), success)
            mstore(0x5ae0, mload(0x5a00))
            mstore(0x5b00, mload(0x5a20))
            mstore(0x5b20, mload(0x5a80))
            mstore(0x5b40, mload(0x5aa0))
            success := and(eq(staticcall(gas(), 0x6, 0x5ae0, 0x80, 0x5ae0, 0x40), 1), success)
            mstore(0x5b60, mload(0x2c0))
            mstore(0x5b80, mload(0x2e0))
            mstore(0x5ba0, mload(0x4920))
            success := and(eq(staticcall(gas(), 0x7, 0x5b60, 0x60, 0x5b60, 0x40), 1), success)
            mstore(0x5bc0, mload(0x5ae0))
            mstore(0x5be0, mload(0x5b00))
            mstore(0x5c00, mload(0x5b60))
            mstore(0x5c20, mload(0x5b80))
            success := and(eq(staticcall(gas(), 0x6, 0x5bc0, 0x80, 0x5bc0, 0x40), 1), success)
            mstore(0x5c40, mload(0x540))
            mstore(0x5c60, mload(0x560))
            mstore(0x5c80, mload(0x50e0))
            success := and(eq(staticcall(gas(), 0x7, 0x5c40, 0x60, 0x5c40, 0x40), 1), success)
            mstore(0x5ca0, mload(0x5bc0))
            mstore(0x5cc0, mload(0x5be0))
            mstore(0x5ce0, mload(0x5c40))
            mstore(0x5d00, mload(0x5c60))
            success := and(eq(staticcall(gas(), 0x6, 0x5ca0, 0x80, 0x5ca0, 0x40), 1), success)
            mstore(0x5d20, mload(0x300))
            mstore(0x5d40, mload(0x320))
            mstore(0x5d60, mload(0x4e40))
            success := and(eq(staticcall(gas(), 0x7, 0x5d20, 0x60, 0x5d20, 0x40), 1), success)
            mstore(0x5d80, mload(0x5ca0))
            mstore(0x5da0, mload(0x5cc0))
            mstore(0x5dc0, mload(0x5d20))
            mstore(0x5de0, mload(0x5d40))
            success := and(eq(staticcall(gas(), 0x6, 0x5d80, 0x80, 0x5d80, 0x40), 1), success)
            mstore(0x5e00, mload(0x340))
            mstore(0x5e20, mload(0x360))
            mstore(0x5e40, mload(0x4980))
            success := and(eq(staticcall(gas(), 0x7, 0x5e00, 0x60, 0x5e00, 0x40), 1), success)
            mstore(0x5e60, mload(0x5d80))
            mstore(0x5e80, mload(0x5da0))
            mstore(0x5ea0, mload(0x5e00))
            mstore(0x5ec0, mload(0x5e20))
            success := and(eq(staticcall(gas(), 0x6, 0x5e60, 0x80, 0x5e60, 0x40), 1), success)
            mstore(0x5ee0, 0x0000000000000000000000000000000000000000000000000000000000000000)
            mstore(0x5f00, 0x0000000000000000000000000000000000000000000000000000000000000000)
            mstore(0x5f20, mload(0x49a0))
            success := and(eq(staticcall(gas(), 0x7, 0x5ee0, 0x60, 0x5ee0, 0x40), 1), success)
            mstore(0x5f40, mload(0x5e60))
            mstore(0x5f60, mload(0x5e80))
            mstore(0x5f80, mload(0x5ee0))
            mstore(0x5fa0, mload(0x5f00))
            success := and(eq(staticcall(gas(), 0x6, 0x5f40, 0x80, 0x5f40, 0x40), 1), success)
            mstore(0x5fc0, 0x20bbf27f485c45a951af33247c9c1e29937fc756d7ac756c20eb625e480c4b09)
            mstore(0x5fe0, 0x22f8de8bb3c084ce5499afe2187541ba5c0745385f6bf9dbee9f323cc8f3916a)
            mstore(0x6000, mload(0x49c0))
            success := and(eq(staticcall(gas(), 0x7, 0x5fc0, 0x60, 0x5fc0, 0x40), 1), success)
            mstore(0x6020, mload(0x5f40))
            mstore(0x6040, mload(0x5f60))
            mstore(0x6060, mload(0x5fc0))
            mstore(0x6080, mload(0x5fe0))
            success := and(eq(staticcall(gas(), 0x6, 0x6020, 0x80, 0x6020, 0x40), 1), success)
            mstore(0x60a0, 0x2444a5448a276bfb356acaa11c5f5edf48601c87b2188ab82c510411d3b3cb27)
            mstore(0x60c0, 0x1fd49ce22a652255896c782ce07e562f7a1885841943bee7f3dc8d4006a243ca)
            mstore(0x60e0, mload(0x49e0))
            success := and(eq(staticcall(gas(), 0x7, 0x60a0, 0x60, 0x60a0, 0x40), 1), success)
            mstore(0x6100, mload(0x6020))
            mstore(0x6120, mload(0x6040))
            mstore(0x6140, mload(0x60a0))
            mstore(0x6160, mload(0x60c0))
            success := and(eq(staticcall(gas(), 0x6, 0x6100, 0x80, 0x6100, 0x40), 1), success)
            mstore(0x6180, 0x015577eb5bcd2a4d3ff4de099d63f4c83fd9039ba023e2f12761eadb80b8960f)
            mstore(0x61a0, 0x074a90640772fbc980520cc658bb411d7a7dfb841c2a60d45ba27cb66305becb)
            mstore(0x61c0, mload(0x4a00))
            success := and(eq(staticcall(gas(), 0x7, 0x6180, 0x60, 0x6180, 0x40), 1), success)
            mstore(0x61e0, mload(0x6100))
            mstore(0x6200, mload(0x6120))
            mstore(0x6220, mload(0x6180))
            mstore(0x6240, mload(0x61a0))
            success := and(eq(staticcall(gas(), 0x6, 0x61e0, 0x80, 0x61e0, 0x40), 1), success)
            mstore(0x6260, 0x2c5b66907aced0a60db7d403899dfdc0ef29dddf972f3bb49742924e13d9448b)
            mstore(0x6280, 0x25521235dcc5501cb1978ca23e0253eeb37b6e5ea37c64ecb2996a2af69a42e2)
            mstore(0x62a0, mload(0x4a20))
            success := and(eq(staticcall(gas(), 0x7, 0x6260, 0x60, 0x6260, 0x40), 1), success)
            mstore(0x62c0, mload(0x61e0))
            mstore(0x62e0, mload(0x6200))
            mstore(0x6300, mload(0x6260))
            mstore(0x6320, mload(0x6280))
            success := and(eq(staticcall(gas(), 0x6, 0x62c0, 0x80, 0x62c0, 0x40), 1), success)
            mstore(0x6340, 0x0c55048406105d3f30f5fa36d2597bafa950a3044838099e0165ab6d32a905d5)
            mstore(0x6360, 0x08acc20a546af4363c715c0505b4c7d2097521b6758908c5abcef84ffa5062b7)
            mstore(0x6380, mload(0x4a40))
            success := and(eq(staticcall(gas(), 0x7, 0x6340, 0x60, 0x6340, 0x40), 1), success)
            mstore(0x63a0, mload(0x62c0))
            mstore(0x63c0, mload(0x62e0))
            mstore(0x63e0, mload(0x6340))
            mstore(0x6400, mload(0x6360))
            success := and(eq(staticcall(gas(), 0x6, 0x63a0, 0x80, 0x63a0, 0x40), 1), success)
            mstore(0x6420, 0x1ef1fcc71ca53242710a38ab6b402aa708442f9aa23a96fd08586dc545eccfd0)
            mstore(0x6440, 0x2674d5120372396f52147379efc130559f868092386239416ffcc527bfd02ee4)
            mstore(0x6460, mload(0x4a60))
            success := and(eq(staticcall(gas(), 0x7, 0x6420, 0x60, 0x6420, 0x40), 1), success)
            mstore(0x6480, mload(0x63a0))
            mstore(0x64a0, mload(0x63c0))
            mstore(0x64c0, mload(0x6420))
            mstore(0x64e0, mload(0x6440))
            success := and(eq(staticcall(gas(), 0x6, 0x6480, 0x80, 0x6480, 0x40), 1), success)
            mstore(0x6500, 0x0e4655559a78b2a70561b70860cddd31dd38b5632b4cb5cf666169fc414f1442)
            mstore(0x6520, 0x11574befadd2b72822164d676eacb946439dcfe839924b782266d7a21ac79099)
            mstore(0x6540, mload(0x4a80))
            success := and(eq(staticcall(gas(), 0x7, 0x6500, 0x60, 0x6500, 0x40), 1), success)
            mstore(0x6560, mload(0x6480))
            mstore(0x6580, mload(0x64a0))
            mstore(0x65a0, mload(0x6500))
            mstore(0x65c0, mload(0x6520))
            success := and(eq(staticcall(gas(), 0x6, 0x6560, 0x80, 0x6560, 0x40), 1), success)
            mstore(0x65e0, 0x221cd2240b9da59f4a597dd72d27af1907a91c7ae26e8c330dadd9bc208b367e)
            mstore(0x6600, 0x2ccba77a9524c6fc4d4281ba0658266eb092bf8b18aaa91842361a513101ca04)
            mstore(0x6620, mload(0x4aa0))
            success := and(eq(staticcall(gas(), 0x7, 0x65e0, 0x60, 0x65e0, 0x40), 1), success)
            mstore(0x6640, mload(0x6560))
            mstore(0x6660, mload(0x6580))
            mstore(0x6680, mload(0x65e0))
            mstore(0x66a0, mload(0x6600))
            success := and(eq(staticcall(gas(), 0x6, 0x6640, 0x80, 0x6640, 0x40), 1), success)
            mstore(0x66c0, 0x174b5e7576738255e079ba23fff9d142a2d90b9e94a4a7b6701ba3aee013393a)
            mstore(0x66e0, 0x0bcec63fae6b3427a146c29afdbd53ddb4805437eb21dd8675619cad00844f77)
            mstore(0x6700, mload(0x4ac0))
            success := and(eq(staticcall(gas(), 0x7, 0x66c0, 0x60, 0x66c0, 0x40), 1), success)
            mstore(0x6720, mload(0x6640))
            mstore(0x6740, mload(0x6660))
            mstore(0x6760, mload(0x66c0))
            mstore(0x6780, mload(0x66e0))
            success := and(eq(staticcall(gas(), 0x6, 0x6720, 0x80, 0x6720, 0x40), 1), success)
            mstore(0x67a0, 0x2d8acd214853bc661d785328bc06c9655f9813bf6b5cce9348774995f8dbb018)
            mstore(0x67c0, 0x2a6c0433e00834c477c232a018853866442cb20c40a0bf2a8a70225d48ee439f)
            mstore(0x67e0, mload(0x4ae0))
            success := and(eq(staticcall(gas(), 0x7, 0x67a0, 0x60, 0x67a0, 0x40), 1), success)
            mstore(0x6800, mload(0x6720))
            mstore(0x6820, mload(0x6740))
            mstore(0x6840, mload(0x67a0))
            mstore(0x6860, mload(0x67c0))
            success := and(eq(staticcall(gas(), 0x6, 0x6800, 0x80, 0x6800, 0x40), 1), success)
            mstore(0x6880, 0x300d1118ff53ba8732cb79c98959deb80ef9c5814234fc5459b8005b95acdf3a)
            mstore(0x68a0, 0x1a2072bad8e3e8c49b120f4eaa72d5a21e0f4493be799326a7c519ba9ce404bb)
            mstore(0x68c0, mload(0x4b00))
            success := and(eq(staticcall(gas(), 0x7, 0x6880, 0x60, 0x6880, 0x40), 1), success)
            mstore(0x68e0, mload(0x6800))
            mstore(0x6900, mload(0x6820))
            mstore(0x6920, mload(0x6880))
            mstore(0x6940, mload(0x68a0))
            success := and(eq(staticcall(gas(), 0x6, 0x68e0, 0x80, 0x68e0, 0x40), 1), success)
            mstore(0x6960, 0x2e09b4976d115814e6f1a166df3ca2ca907fd6ff0afec8cdea72fd8709e2060e)
            mstore(0x6980, 0x09597eeaa3d2b1e5aafec2a14f93c8ef427f679d38c12d7df8c932ef02727151)
            mstore(0x69a0, mload(0x4b20))
            success := and(eq(staticcall(gas(), 0x7, 0x6960, 0x60, 0x6960, 0x40), 1), success)
            mstore(0x69c0, mload(0x68e0))
            mstore(0x69e0, mload(0x6900))
            mstore(0x6a00, mload(0x6960))
            mstore(0x6a20, mload(0x6980))
            success := and(eq(staticcall(gas(), 0x6, 0x69c0, 0x80, 0x69c0, 0x40), 1), success)
            mstore(0x6a40, 0x2b2c88237a3169e2c284b0ff5f04a1dc747cbe6bca2baa362a16c7f0c08c4ba6)
            mstore(0x6a60, 0x0ef484bc95dbe0e9204d7eef2deb26378a2540eb556f90f295b65cdb71aa9141)
            mstore(0x6a80, mload(0x4b40))
            success := and(eq(staticcall(gas(), 0x7, 0x6a40, 0x60, 0x6a40, 0x40), 1), success)
            mstore(0x6aa0, mload(0x69c0))
            mstore(0x6ac0, mload(0x69e0))
            mstore(0x6ae0, mload(0x6a40))
            mstore(0x6b00, mload(0x6a60))
            success := and(eq(staticcall(gas(), 0x6, 0x6aa0, 0x80, 0x6aa0, 0x40), 1), success)
            mstore(0x6b20, 0x20865706978525f05cd88fbc1e22a64bca49e155b77cf4a6aba4e9a536f1af94)
            mstore(0x6b40, 0x2d8872e1269ab93a102b08f1f3401afae1074c27f109d40919e9e855ada90306)
            mstore(0x6b60, mload(0x4b60))
            success := and(eq(staticcall(gas(), 0x7, 0x6b20, 0x60, 0x6b20, 0x40), 1), success)
            mstore(0x6b80, mload(0x6aa0))
            mstore(0x6ba0, mload(0x6ac0))
            mstore(0x6bc0, mload(0x6b20))
            mstore(0x6be0, mload(0x6b40))
            success := and(eq(staticcall(gas(), 0x6, 0x6b80, 0x80, 0x6b80, 0x40), 1), success)
            mstore(0x6c00, 0x088931b6933831d6899ae7ce9a1052284545afff9f21a235e61ad1decbf06f9f)
            mstore(0x6c20, 0x248c0912aa97d903345b691d643dc9407aca9dab62bf3fa8dd2200c1283c4a5c)
            mstore(0x6c40, mload(0x4b80))
            success := and(eq(staticcall(gas(), 0x7, 0x6c00, 0x60, 0x6c00, 0x40), 1), success)
            mstore(0x6c60, mload(0x6b80))
            mstore(0x6c80, mload(0x6ba0))
            mstore(0x6ca0, mload(0x6c00))
            mstore(0x6cc0, mload(0x6c20))
            success := and(eq(staticcall(gas(), 0x6, 0x6c60, 0x80, 0x6c60, 0x40), 1), success)
            mstore(0x6ce0, mload(0x620))
            mstore(0x6d00, mload(0x640))
            mstore(0x6d20, mload(0x4ba0))
            success := and(eq(staticcall(gas(), 0x7, 0x6ce0, 0x60, 0x6ce0, 0x40), 1), success)
            mstore(0x6d40, mload(0x6c60))
            mstore(0x6d60, mload(0x6c80))
            mstore(0x6d80, mload(0x6ce0))
            mstore(0x6da0, mload(0x6d00))
            success := and(eq(staticcall(gas(), 0x6, 0x6d40, 0x80, 0x6d40, 0x40), 1), success)
            mstore(0x6dc0, mload(0x660))
            mstore(0x6de0, mload(0x680))
            mstore(0x6e00, mload(0x4bc0))
            success := and(eq(staticcall(gas(), 0x7, 0x6dc0, 0x60, 0x6dc0, 0x40), 1), success)
            mstore(0x6e20, mload(0x6d40))
            mstore(0x6e40, mload(0x6d60))
            mstore(0x6e60, mload(0x6dc0))
            mstore(0x6e80, mload(0x6de0))
            success := and(eq(staticcall(gas(), 0x6, 0x6e20, 0x80, 0x6e20, 0x40), 1), success)
            mstore(0x6ea0, mload(0x6a0))
            mstore(0x6ec0, mload(0x6c0))
            mstore(0x6ee0, mload(0x4be0))
            success := and(eq(staticcall(gas(), 0x7, 0x6ea0, 0x60, 0x6ea0, 0x40), 1), success)
            mstore(0x6f00, mload(0x6e20))
            mstore(0x6f20, mload(0x6e40))
            mstore(0x6f40, mload(0x6ea0))
            mstore(0x6f60, mload(0x6ec0))
            success := and(eq(staticcall(gas(), 0x6, 0x6f00, 0x80, 0x6f00, 0x40), 1), success)
            mstore(0x6f80, mload(0x6e0))
            mstore(0x6fa0, mload(0x700))
            mstore(0x6fc0, mload(0x4c00))
            success := and(eq(staticcall(gas(), 0x7, 0x6f80, 0x60, 0x6f80, 0x40), 1), success)
            mstore(0x6fe0, mload(0x6f00))
            mstore(0x7000, mload(0x6f20))
            mstore(0x7020, mload(0x6f80))
            mstore(0x7040, mload(0x6fa0))
            success := and(eq(staticcall(gas(), 0x6, 0x6fe0, 0x80, 0x6fe0, 0x40), 1), success)
            mstore(0x7060, mload(0x580))
            mstore(0x7080, mload(0x5a0))
            mstore(0x70a0, mload(0x4c20))
            success := and(eq(staticcall(gas(), 0x7, 0x7060, 0x60, 0x7060, 0x40), 1), success)
            mstore(0x70c0, mload(0x6fe0))
            mstore(0x70e0, mload(0x7000))
            mstore(0x7100, mload(0x7060))
            mstore(0x7120, mload(0x7080))
            success := and(eq(staticcall(gas(), 0x6, 0x70c0, 0x80, 0x70c0, 0x40), 1), success)
            mstore(0x7140, mload(0xd20))
            mstore(0x7160, mload(0xd40))
            mstore(0x7180, mload(0x51c0))
            success := and(eq(staticcall(gas(), 0x7, 0x7140, 0x60, 0x7140, 0x40), 1), success)
            mstore(0x71a0, mload(0x70c0))
            mstore(0x71c0, mload(0x70e0))
            mstore(0x71e0, mload(0x7140))
            mstore(0x7200, mload(0x7160))
            success := and(eq(staticcall(gas(), 0x6, 0x71a0, 0x80, 0x71a0, 0x40), 1), success)
            mstore(0x7220, mload(0xd60))
            mstore(0x7240, mload(0xd80))
            mstore(0x7260, mload(0x5200))
            success := and(eq(staticcall(gas(), 0x7, 0x7220, 0x60, 0x7220, 0x40), 1), success)
            mstore(0x7280, mload(0x71a0))
            mstore(0x72a0, mload(0x71c0))
            mstore(0x72c0, mload(0x7220))
            mstore(0x72e0, mload(0x7240))
            success := and(eq(staticcall(gas(), 0x6, 0x7280, 0x80, 0x7280, 0x40), 1), success)
            mstore(0x7300, mload(0xda0))
            mstore(0x7320, mload(0xdc0))
            mstore(0x7340, mload(0x5240))
            success := and(eq(staticcall(gas(), 0x7, 0x7300, 0x60, 0x7300, 0x40), 1), success)
            mstore(0x7360, mload(0x7280))
            mstore(0x7380, mload(0x72a0))
            mstore(0x73a0, mload(0x7300))
            mstore(0x73c0, mload(0x7320))
            success := and(eq(staticcall(gas(), 0x6, 0x7360, 0x80, 0x7360, 0x40), 1), success)
            mstore(0x73e0, mload(0xde0))
            mstore(0x7400, mload(0xe00))
            mstore(0x7420, mload(0x5280))
            success := and(eq(staticcall(gas(), 0x7, 0x73e0, 0x60, 0x73e0, 0x40), 1), success)
            mstore(0x7440, mload(0x7360))
            mstore(0x7460, mload(0x7380))
            mstore(0x7480, mload(0x73e0))
            mstore(0x74a0, mload(0x7400))
            success := and(eq(staticcall(gas(), 0x6, 0x7440, 0x80, 0x7440, 0x40), 1), success)
            mstore(0x74c0, mload(0xd60))
            mstore(0x74e0, mload(0xd80))
            mstore(0x7500, mload(0x4d40))
            success := and(eq(staticcall(gas(), 0x7, 0x74c0, 0x60, 0x74c0, 0x40), 1), success)
            mstore(0x7520, mload(0xd20))
            mstore(0x7540, mload(0xd40))
            mstore(0x7560, mload(0x74c0))
            mstore(0x7580, mload(0x74e0))
            success := and(eq(staticcall(gas(), 0x6, 0x7520, 0x80, 0x7520, 0x40), 1), success)
            mstore(0x75a0, mload(0xda0))
            mstore(0x75c0, mload(0xdc0))
            mstore(0x75e0, mload(0x4fa0))
            success := and(eq(staticcall(gas(), 0x7, 0x75a0, 0x60, 0x75a0, 0x40), 1), success)
            mstore(0x7600, mload(0x7520))
            mstore(0x7620, mload(0x7540))
            mstore(0x7640, mload(0x75a0))
            mstore(0x7660, mload(0x75c0))
            success := and(eq(staticcall(gas(), 0x6, 0x7600, 0x80, 0x7600, 0x40), 1), success)
            mstore(0x7680, mload(0xde0))
            mstore(0x76a0, mload(0xe00))
            mstore(0x76c0, mload(0x5140))
            success := and(eq(staticcall(gas(), 0x7, 0x7680, 0x60, 0x7680, 0x40), 1), success)
            mstore(0x76e0, mload(0x7600))
            mstore(0x7700, mload(0x7620))
            mstore(0x7720, mload(0x7680))
            mstore(0x7740, mload(0x76a0))
            success := and(eq(staticcall(gas(), 0x6, 0x76e0, 0x80, 0x76e0, 0x40), 1), success)
            mstore(0x7760, mload(0x7440))
            mstore(0x7780, mload(0x7460))
            mstore(0x77a0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x77c0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x77e0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x7800, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
            mstore(0x7820, mload(0x76e0))
            mstore(0x7840, mload(0x7700))
            mstore(0x7860, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)
            mstore(0x7880, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)
            mstore(0x78a0, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)
            mstore(0x78c0, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)
            success := and(eq(staticcall(gas(), 0x8, 0x7760, 0x180, 0x7760, 0x20), 1), success)
            success := and(eq(mload(0x7760), 1), success)
        }
        return success;
    }
}
